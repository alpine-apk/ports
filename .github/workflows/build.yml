name: Test OpenBSD Ports

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-openbsd-port:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        port: [ "net/shadowsocks-libev", "net/shadowsocks-rust" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start OpenBSD VM
        id: vm
        uses: vmactions/openbsd-vm@v1
        with:
          release: "7.6"
          sync: nfs
          prepare: |
            pkg_add -u
            # Common dependencies
            pkg_add git gmake
            # shadowsocks-libev dependencies
            if [ "${{ matrix.port }}" = "net/shadowsocks-libev" ]; then
              pkg_add autoconf automake libtool libev mbedtls pcre libsodium libcares
            fi
            # shadowsocks-rust dependencies
            if [ "${{ matrix.port }}" = "net/shadowsocks-rust" ]; then
              pkg_add rust
            fi

      - name: Install ports tree
        shell: openbsd {0}
        run: |
          echo "Verifying execution inside OpenBSD VM"
          uname -a
          whoami
          echo "Starting ports tree installation"
          ping -c 4 cdn.openbsd.org || (echo "Network unreachable" && exit 1)
          curl -L -o /tmp/ports.tar.gz https://cdn.openbsd.org/pub/OpenBSD/7.6/ports.tar.gz || (echo "Failed to download ports.tar.gz" && exit 1)
          ls -lh /tmp/ports.tar.gz
          tar -tzf /tmp/ports.tar.gz | grep infrastructure/mk/bsd.port.mk || (echo "bsd.port.mk not in tarball" && exit 1)
          tar -xzvf /tmp/ports.tar.gz -C /usr/ || (echo "Failed to extract ports.tar.gz" && exit 1)
          rm /tmp/ports.tar.gz
          ls -l /usr/ports/infrastructure/mk/bsd.port.mk || (echo "bsd.port.mk not found" && exit 1)
          echo "Ports tree installed successfully"

      - name: Copy port files and generate distinfo
        shell: openbsd {0}
        run: |
          echo "Copying port files for ${{ matrix.port }}"
          ls -l $GITHUB_WORKSPACE/${{ matrix.port }}/ || (echo "Source directory not found" && exit 1)
          mkdir -p /usr/ports/${{ matrix.port }}/patches
          cp -r $GITHUB_WORKSPACE/${{ matrix.port }}/* /usr/ports/${{ matrix.port }}/ || (echo "Copy failed" && exit 1)
          cd /usr/ports/${{ matrix.port }}
          ls -l .  # Verify directory contents
          ls -l patches/  # Verify patch files if exist
          cat -et Makefile
          cat Makefile > Makefile_debug.txt
          echo "Generating distinfo"
          make makesum || (echo "Failed to generate distinfo for tarball" && exit 1)
          # Add patch checksums if needed
          if [ -d patches ]; then
            for patch in patches/*; do
              if [ -f "$patch" ]; then
                sha256 "$patch" | awk '{print "SHA256 (" $4 ") = " $1}' >> distinfo
                wc -c "$patch" | awk '{print "SIZE (" $2 ") = " $1}' >> distinfo
              fi
            done
          fi
          cat distinfo  # Log distinfo contents
          echo "Port files copied and distinfo generated"

      - name: Build and package with debug output
        shell: openbsd {0}
        run: |
          echo "Starting build for ${{ matrix.port }}"
          cd /usr/ports/${{ matrix.port }}
          ls -l /usr/ports/infrastructure/mk/bsd.port.mk || (echo "bsd.port.mk missing before make" && exit 1)
          ls -l distinfo || (echo "distinfo missing" && exit 1)
          make -d A NO_DEPENDS=1 fetch > fetch_debug.txt 2>&1 || (cat fetch_debug.txt && exit 1)
          make NO_DEPENDS=1 patch
          make NO_DEPENDS=1
          make NO_DEPENDS=1 install
          make NO_DEPENDS=1 package
          ls -lh /usr/ports/packages/$(uname -m)/all/
          echo "Copying artifacts to host workspace"
          mkdir -p $GITHUB_WORKSPACE/artifacts/${{ matrix.port }}
          cp fetch_debug.txt $GITHUB_WORKSPACE/artifacts/${{ matrix.port }}/
          cp Makefile_debug.txt $GITHUB_WORKSPACE/artifacts/${{ matrix.port }}/
          cp distinfo $GITHUB_WORKSPACE/artifacts/${{ matrix.port }}/
          cp /usr/ports/packages/amd64/all/*.tgz $GITHUB_WORKSPACE/artifacts/${{ matrix.port }}/
          echo "Build completed for ${{ matrix.port }}"


      - name: Set artifact name
        id: set_artifact_name
        run: |
         ARTIFACT_NAME=$(echo "${{ matrix.port }}" | sed 's/\//-/g')-package
         echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
          with:
          name: ${{ steps.set_artifact_name.outputs.ARTIFACT_NAME }}
          path: ${{ github.workspace }}/artifacts/${{ matrix.port }}/*.tgz
